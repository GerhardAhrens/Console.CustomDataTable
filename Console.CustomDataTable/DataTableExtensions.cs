/*
 * <copyright file="DataTableExtensions.cs" company="Lifeprojects.de">
 *     Class: DataTableExtensions
 *     Copyright © Lifeprojects.de 2025
 * </copyright>
 *
 * <author>Gerhard Ahrens - Lifeprojects.de</author>
 * <email>gerhard.ahrens@lifeprojects.de</email>
 * <date>20.07.2025 14:08:20</date>
 * <Project>EasyPrototypingNET</Project>
 *
 * <summary>
 * Die Klasse DataTableExtensions stellt per CodeDOM einen SorceGenerator für DataTable zur Verfügung.
 * </summary>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by the Free Software Foundation, 
 * either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.You should have received a copy of the GNU General Public License along with this program. 
 * If not, see <http://www.gnu.org/licenses/>.
*/

namespace Console.CustomDataTable
{
    using System;
    using System.CodeDom;
    using System.CodeDom.Compiler;
    using System.Data;

    using Microsoft.CSharp;

    public static class DataTableExtensions
    {

        public static string DataTableToCode(this DataTable Table)
        {
            string className = Table.TableName;
            if (string.IsNullOrWhiteSpace(className) == true)
            { 
                className = "UnnamedTableAsClass";
            }

            className += $"{className}TableAsClass";

            // Create the class
            CodeTypeDeclaration codeClass = CreateClass(className);

            // Add public properties
            foreach (DataColumn column in Table.Columns)
            {
                codeClass.Members.Add(CreateProperty(column.ColumnName, column.DataType));
            }

            // Add Class to Namespace
            string namespaceName = "AutoGeneratedDomainModels";
            CodeNamespace codeNamespace = new CodeNamespace(namespaceName);
            codeNamespace.Types.Add(codeClass);

            // Generate code
            string filename = $"{namespaceName}.{className}.cs";
            CreateCodeFile(filename, codeNamespace);

            // Return filename
            return filename;
        }

        private static CodeTypeDeclaration CreateClass(string name)
        {
            CodeTypeDeclaration result = new CodeTypeDeclaration(name);
            result.Attributes = MemberAttributes.Public;
            result.Members.Add(CreateConstructor(name)); // Add Klassenkonstruktor
            return result;
        }

        private static CodeConstructor CreateConstructor(string className)
        {
            CodeConstructor result = new CodeConstructor();
            result.Attributes = MemberAttributes.Public;
            result.Name = className;
            return result;
        }

        private static CodeMemberField CreateProperty(string name, Type type)
        {
            // Mit diesem Trick können Auto-Prperties erstellt werden
            // Automatisch wird am Satement-Ende ein Semikolon angehängt,
            // dass später wieder entfernt werden muss
            string memberName = name + "\t{ get; set; }//";

            CodeMemberField result = new CodeMemberField(type, memberName);
            result.Attributes = MemberAttributes.Public | MemberAttributes.Final;
            return result;
        }

        private static void CreateCodeFile(string filename, CodeNamespace codeNamespace)
        {
            CodeGeneratorOptions codeOptions = new CodeGeneratorOptions();
            codeOptions.BlankLinesBetweenMembers = false;
            codeOptions.VerbatimOrder = true;
            codeOptions.BracingStyle = "C";
            codeOptions.IndentString = "\t";

            // Schreibe Source in File
            using (TextWriter textWriter = new StreamWriter(filename))
            {
                CSharpCodeProvider codeProvider = new CSharpCodeProvider();
                codeProvider.GenerateCodeFromNamespace(codeNamespace, textWriter, codeOptions);
            }

            // Korrektur des Autoproperty Trick (wegen Semikolon)
            string source = File.ReadAllText(filename).Replace("//;", string.Empty);
            File.WriteAllText(filename, source);
        }
    }
}
